(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{473:function(e,t,s){"use strict";s.r(t);var i=s(65),a=Object(i.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"_1-tie-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-tie-command"}},[e._v("#")]),e._v(" 1. tie command")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("secrets\nTop level SecretsManager command for interacting with secrets functionality.")])]),e._v(" "),s("li",[s("p",[e._v("genesis\nGenerates the genesis.json file, with passed in parameters.")])]),e._v(" "),s("li",[s("p",[e._v("server\nThe default command that starts the Tie client, by bootstrapping all modules together.")])]),e._v(" "),s("li",[s("p",[e._v("status\nReturns the status of the Tie client.")])]),e._v(" "),s("li",[s("p",[e._v("txpool\nTop level command for interacting with the transaction pool.")])]),e._v(" "),s("li",[s("p",[e._v("peers\nTop level command for interacting with the network peers.")])]),e._v(" "),s("li",[s("p",[e._v("monitor\nStarts logging block add / remove events on the blockchain.")])]),e._v(" "),s("li",[s("p",[e._v("version\nReturns the current version.")])])]),e._v(" "),s("h2",{attrs:{id:"_2-genesis-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-genesis-command"}},[e._v("#")]),e._v(" 2. genesis command")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("--consensus\nSets consensus protocol. Default: pvbft.")])]),e._v(" "),s("li",[s("p",[e._v("--bootnode\nMultiaddr URL for p2p discovery bootstrap. This flag can be used multiple times.")])]),e._v(" "),s("li",[s("p",[e._v("--ibft-validator\nSets passed in addresses as IBFT validators. Needs to be present if ibft-validators-prefix-path is omitted.")])]),e._v(" "),s("li",[s("p",[e._v("--epoch-size\nSets the epoch size for the chain. Default 129600")])]),e._v(" "),s("li",[s("p",[e._v("--pos\nSets the flag indicating that the client should use Proof of Stake IBFT.")])]),e._v(" "),s("li",[s("p",[e._v("--dir\nSets the directory for the Polygon Edge genesis data. Default: ./genesis.json.")])]),e._v(" "),s("li",[s("p",[e._v("--name\nSets the name for the chain. Default: tie.")])]),e._v(" "),s("li",[s("p",[e._v("--ibft-validators-prefix-path\nPrefix path for validator folder directory. Needs to be present if ibft-validator is omitted.")])]),e._v(" "),s("li",[s("p",[e._v("--block-gas-limit\nSet block gas limit")])]),e._v(" "),s("li",[s("p",[e._v("--premine\nSets the premined accounts and balances. Default premined balance: 0x4546c07635c1fc494600000")])]),e._v(" "),s("li",[s("p",[e._v("--chainid\nSets the ID of the chain. Default: 100")])])]),e._v(" "),s("h2",{attrs:{id:"_3-server-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-server-command"}},[e._v("#")]),e._v(" 3. server command")]),e._v(" "),s("ul",[s("li",[s("p",[e._v("--log-path LOG_PATH\nSets the log path for console output. Default: logs/tiechain.log.")])]),e._v(" "),s("li",[s("p",[e._v("---grpc GRPC_ADDRESS\nSets the address and port for the gRPC service (address:port). Default: :7749.")])]),e._v(" "),s("li",[s("p",[e._v("--libp2p LIBP2P_ADDRESS\nSets the address and port for the libp2p service (address:port). Default: 6636.")])]),e._v(" "),s("li",[s("p",[e._v("--jsonrpc JSONRPC_ADDRESS\nSets the address and port for the JSON-RPC service (address:port). Default: 8545.")])]),e._v(" "),s("li",[s("p",[e._v("--no-discover NO_DISCOVER\nPrevents the client from discovering other peers. Default: false.")])]),e._v(" "),s("li",[s("p",[e._v("--price-limit PRICE_LIMIT\nSets minimum gas price limit to enforce for acceptance into the pool. Default: 0.")])]),e._v(" "),s("li",[s("p",[e._v("--prometheus PROMETHEUS_ADDRESS\nSets the address and port for the prometheus instrumentation service (address:port).")])]),e._v(" "),s("li",[s("p",[e._v("--data-dir DATA_DIRECTORY\nSpecifies the data directory used for storing TIE client data. Default: ./test-chain.")])]),e._v(" "),s("li",[s("p",[e._v("--log-level LOG_LEVEL\nSets the log level for console output. Default: INFO.")])]),e._v(" "),s("li",[s("p",[e._v("--seal SHOULD_SEAL\nSets the flag indicating that the client should seal blocks. Default: false.")])]),e._v(" "),s("li",[s("p",[e._v("--config CLI_CONFIG_PATH\nSpecifies the path to the CLI config. Supports .json and .hcl.")])]),e._v(" "),s("li",[s("p",[e._v("--chain GENESIS_FILE\nSpecifies the genesis file used for starting the chain. Default: test.")])]),e._v(" "),s("li",[s("p",[e._v("--secrets-config SECRETS_CONFIG\nSets the path to the SecretsManager config file. Used for Hashicorp Vault. If omitted, the local FS secrets manager is used.")])]),e._v(" "),s("li",[s("p",[e._v("--block-time BLOCK_TIME\nSets block time in seconds. Default: 2s.")])]),e._v(" "),s("li",[s("p",[e._v("--block-gas-target BLOCK_GAS_TARGET\nSets the target block gas limit for the chain. If omitted, the value of the parent block is used.")])]),e._v(" "),s("li",[s("p",[e._v("--max-peers PEER_COUNT\nSets the client's max no.of peers allowded. Default: 21.")])]),e._v(" "),s("li",[s("p",[e._v("--max-slots MAX_SLOTS\nSets maximum slots in the pool. Default: 4096.")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);