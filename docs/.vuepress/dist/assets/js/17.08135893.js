(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{471:function(e,t,a){"use strict";a.r(t);var s=a(65),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"_1-installation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-installation"}},[e._v("#")]),e._v(" 1. Installation")]),e._v(" "),a("h3",{attrs:{id:"_1-1-building"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-building"}},[e._v("#")]),e._v(" 1.1 Building")]),e._v(" "),a("p",[a("code",[e._v("make build")]),e._v(": Builds "),a("code",[e._v("chainbridge")]),e._v(" in "),a("code",[e._v("./build")]),e._v(".")]),e._v(" "),a("p",[a("strong",[e._v("or")])]),e._v(" "),a("p",[a("code",[e._v("make install")]),e._v(": Uses "),a("code",[e._v("go install")]),e._v(" to add "),a("code",[e._v("chainbridge")]),e._v(" to your GOBIN.")]),e._v(" "),a("h3",{attrs:{id:"_1-2-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker"}},[e._v("#")]),e._v(" 1.2 Docker")]),e._v(" "),a("p",[e._v("The official ChainBridge Docker image can be found here.")]),e._v(" "),a("p",[e._v("To build the Docker image locally run:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker build -t chainsafe/chainbridge .\n")])])]),a("p",[e._v("To start ChainBridge:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("docker run -v")]),e._v(" uses an absolute path rather than a relative one.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("docker run -v $(pwd)/config.json:/config.json chainsafe/chainbridge\n")])])]),a("h2",{attrs:{id:"_2-configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-configuration"}},[e._v("#")]),e._v(" 2. Configuration")]),e._v(" "),a("blockquote",[a("p",[e._v("Note: TOML configs have been deprecated in favour of JSON")])]),e._v(" "),a("p",[e._v("A chain configurations take this form:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "name": "eth",                      // Human-readable name\n    "type": "ethereum",                 // Chain type (eg. "ethereum" or "substrate")\n    "id": "0",                          // Chain ID\n    "endpoint": "ws://<host>:<port>",   // Node endpoint\n    "from": "0xff93...",                // On-chain address of relayer\n    "opts": {},                         // Chain-specific configuration options (see below)\n}\n')])])]),a("p",[e._v("See "),a("code",[e._v("config.json.example")]),e._v(" for an example configuration.")]),e._v(" "),a("h3",{attrs:{id:"_2-1-ethereum-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-ethereum-options"}},[e._v("#")]),e._v(" 2.1 Ethereum Options")]),e._v(" "),a("p",[e._v("Ethereum chains support the following additional options:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "bridge": "0x12345...",          // Address of the bridge contract (required)\n    "erc20Handler": "0x1234...",     // Address of erc20 handler (required)\n    "erc721Handler": "0x1234...",    // Address of erc721 handler (required)\n    "genericHandler": "0x1234...",   // Address of generic handler (required)\n    "maxGasPrice": "0x1234",         // Gas price for transactions (default: 20000000000)\n    "minGasPrice": "0x1234",         // Minimum gas price for transactions (default: 0)\n    "gasLimit": "0x1234",            // Gas limit for transactions (default: 6721975)\n    "gasMultiplier": "1.25",         // Multiplies the gas price by the supplied value (default: 1)\n    "http": "true",                  // Whether the chain connection is ws or http (default: false)\n    "startBlock": "1234",            // The block to start processing events from (default: 0)\n    "blockConfirmations": "10"       // Number of blocks to wait before processing a block\n    "useExtendedCall": "true"        // Extend extrinsic calls to substrate with ResourceID. Used for backward compatibility with example pallet. *Default: false*\n    "egsApiKey": "xxx..."            // API key for Eth Gas Station (https://www.ethgasstation.info/)\n    "egsSpeed": "fast"               // Desired speed for gas price selection, the options are: "average", "fast", "fastest"\n}\n')])])]),a("h3",{attrs:{id:"_2-2-substrate-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-substrate-options"}},[e._v("#")]),e._v(" 2.2 Substrate Options")]),e._v(" "),a("p",[e._v("Substrate supports the following additonal options:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{\n    "startBlock": "1234" // The block to start processing events from (default: 0)\n}\n')])])]),a("h3",{attrs:{id:"_2-3-blockstore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-blockstore"}},[e._v("#")]),e._v(" 2.3 Blockstore")]),e._v(" "),a("p",[e._v("The blockstore is used to record the last block the relayer processed, so it can pick up where it left off.")]),e._v(" "),a("p",[e._v("If a "),a("code",[e._v("startBlock")]),e._v(" option is provided , then the greater of "),a("code",[e._v("startBlock")]),e._v(" and the latest block in the blockstore is used at startup.")]),e._v(" "),a("p",[e._v("To disable loading from the blockstore specify the "),a("code",[e._v("--fresh")]),e._v(" flag. A custom path for the blockstore can be provided with "),a("code",[e._v("--blockstore <path>")]),e._v(". For development, the "),a("code",[e._v("--latest")]),e._v(" flag can be used to start from the current block and override any other configuration.")]),e._v(" "),a("h3",{attrs:{id:"_2-4-keystore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-keystore"}},[e._v("#")]),e._v(" 2.4 Keystore")]),e._v(" "),a("p",[e._v("ChainBridge requires keys to sign and submit transactions, and to identify each bridge node on chain.")]),e._v(" "),a("p",[e._v("To use secure keys, see "),a("code",[e._v("chainbridge accounts --help")]),e._v(". The keystore password can be supplied with the "),a("code",[e._v("KEYSTORE_PASSWORD")]),e._v(" environment variable.")]),e._v(" "),a("p",[e._v("To import external ethereum keys, such as those generated with geth, use "),a("code",[e._v("chainbridge accounts import --ethereum /path/to/key")]),e._v(".")]),e._v(" "),a("p",[e._v("To import private keys as keystores, use "),a("code",[e._v("chainbridge account import --privateKey key")]),e._v(".")]),e._v(" "),a("p",[e._v("For testing purposes, chainbridge provides 5 test keys. The can be used with "),a("code",[e._v("--testkey <name>")]),e._v(", where "),a("code",[e._v("name")]),e._v(" is one of "),a("code",[e._v("Alice")]),e._v(", "),a("code",[e._v("Bob")]),e._v(", "),a("code",[e._v("Charlie")]),e._v(", "),a("code",[e._v("Dave")]),e._v(", or "),a("code",[e._v("Eve")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"_3-chain-implementations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-chain-implementations"}},[e._v("#")]),e._v(" 3. Chain-Implementations")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Ethereum (Solidity):")]),e._v(" "),a("p",[e._v("The Solidity contracts required for chainbridge. Includes deployment and interaction CLI.")]),e._v(" "),a("p",[e._v("The bindings for the contracts live in "),a("code",[e._v("bindings/")]),e._v(". To update the bindings modify "),a("code",[e._v("scripts/setup-contracts.sh")]),e._v(" and then run "),a("code",[e._v("make clean && make setup-contracts")])])])]),e._v(" "),a("h2",{attrs:{id:"_4-docs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-docs"}},[e._v("#")]),e._v(" 4. Docs")]),e._v(" "),a("p",[e._v("MKdocs will generate static HTML files for Chainsafe markdown files located in "),a("code",[e._v("Chainbridge/docs/")])]),e._v(" "),a("p",[a("code",[e._v("make install-mkdocs")]),e._v(": Pull the docker image MkDocs")]),e._v(" "),a("p",[a("code",[e._v("make mkdocs")]),e._v(": Run MkDoc's docker image, building and hosting the html files on "),a("code",[e._v("localhost:8000")])]),e._v(" "),a("h2",{attrs:{id:"_5-testing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-testing"}},[e._v("#")]),e._v(" 5. Testing")]),e._v(" "),a("p",[e._v("Unit tests require an ethereum node running on "),a("code",[e._v("localhost:8545")]),e._v(" and a substrate node running on "),a("code",[e._v("localhost:9944")]),e._v(". E2E tests require an additional ethereum node on "),a("code",[e._v("localhost:8546")]),e._v(".")]),e._v(" "),a("p",[e._v("A docker-compose file is provided to run two Geth nodes and a chainbridge-substrate-chain node in isolated environments:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker-compose -f ./docker-compose-e2e.yml up\n")])])]),a("p",[e._v("All Go tests can be run with:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ make test\n")])])]),a("p",[e._v("Go tests specifically for ethereum, substrate and E2E can be run with")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ make test-eth\n$ make test-sub\n$ make test-e2e\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);