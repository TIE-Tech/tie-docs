(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{490:function(t,a,s){"use strict";s.r(a);var r=s(65),n=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"_1-pvbft"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-pvbft"}},[t._v("#")]),t._v(" 1. PVBFT")]),t._v(" "),s("h3",{attrs:{id:"_1-1-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-概述"}},[t._v("#")]),t._v(" 1.1 概述")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("PVBFT（POS+VRF+BFT）混合型共识算法，即拜占庭类POS(BFT style Proof of Stake)。\n")])])]),s("h3",{attrs:{id:"_1-2-pos"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-pos"}},[t._v("#")]),t._v(" 1.2 POS")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("POS（Proof of Stake），权益证明，通过Staking机制成为验证者。\n")])])]),s("h3",{attrs:{id:"_1-3-vrf"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-vrf"}},[t._v("#")]),t._v(" 1.3 VRF")]),t._v(" "),s("p",[t._v("VRF是可验证随机函数(verifiable random function)，一方面具有伪随机性，另一方面它还具有可验证性(输出包括一个非交互零知识证明)。")]),t._v(" "),s("p",[t._v("TIE节点选择基于VRF可验证随机函数实现，使出块节点具有不可预测随机性，增加安全保护措施，TIE董事会提出给验证者提供固定区块奖励，基于VRF因素，区块生产者随机产生，因此固定奖励随机分配，分配额按周期结算比率基于平均。")]),t._v(" "),s("h3",{attrs:{id:"_1-4-bft"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-bft"}},[t._v("#")]),t._v(" 1.4 BFT")]),t._v(" "),s("p",[t._v("BFT算法是对PBFT算法进行的改进，除执行共识之外还具备较高的容错机制，设置了状态转换(State Transfer)服务可对发生错误的节点进行修复,重新放入系统,并允许修复完成的节点访问其他节点的状态来获取最新的复制状态。")]),t._v(" "),s("p",[t._v("同时为避免f个节点同时发生错误,状态转换服务将各节点已执行的操作日志存储在其他磁盘,保证系统出现这样的情况时可稳定地恢复,有效提高了系统的性能效率。")]),t._v(" "),s("p",[t._v("BFT共识算法将节点分为领导节点(Leader)和副本节点(Backup)两种类型。其摄政(Regency)机制与PBFT算法的视图(View)机制相同。BFTGSmart算法的共识过程分为：")]),t._v(" "),s("ul",[s("li",[t._v("提议(Propose)")]),t._v(" "),s("li",[t._v("写入(Write)")]),t._v(" "),s("li",[t._v("接受(Accept)")])]),t._v(" "),s("h3",{attrs:{id:"_1-5-epochs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-epochs"}},[t._v("#")]),t._v(" 1.5 Epochs")]),t._v(" "),s("p",[t._v("Epochs 是一个特殊的时间周期，在POS共识中具有重要作用，以区块为单位，TIE决定每EOCH更换一次验证者列表，验证者产生于Staking，并决定每EPOCH进行一次交易手续费奖励结算，奖励额度按Staking比例发放。TIE设定默认EPOCH按72小时一周期，即每129600个区块高度一个周期。")]),t._v(" "),s("p",[t._v("EPOCH值可在创世配置中设定。")]),t._v(" "),s("h3",{attrs:{id:"_1-6-质押"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-质押"}},[t._v("#")]),t._v(" 1.6 质押")]),t._v(" "),s("p",[t._v("用户可以通过调用质押合约的stake方法进行指定金额质押，并参与到验证者列表，并在下个EPOCH参与到区块生产过程中，调用方式如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const StakingContractFactory = await ethers.getContractFactory("Staking");\nlet stakingContract = await StakingContractFactory.attach(STAKING_CONTRACT_ADDRESS) as Staking;\nstakingContract = stakingContract.connect(account);\nconst tx = await stakingContract.stake({value: STAKE_AMOUNT});\n')])])]),s("h3",{attrs:{id:"_1-7-unstaking"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-unstaking"}},[t._v("#")]),t._v(" 1.7 Unstaking")]),t._v(" "),s("p",[t._v("用户可随时对Staking金额进行自主释放，释放后从下一EPOCH开始不在参与区块生产过程。调用方式如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('const StakingContractFactory = await ethers.getContractFactory("Staking");\nlet stakingContract = await StakingContractFactory.attach(STAKING_CONTRACT_ADDRESS) as Staking;\nstakingContract = stakingContract.connect(account);\n\nconst tx = await stakingContract.unstake();\n')])])])])}),[],!1,null,null,null);a.default=n.exports}}]);