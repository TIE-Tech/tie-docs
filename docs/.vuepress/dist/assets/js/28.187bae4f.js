(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{485:function(e,a,t){"use strict";t.r(a);var s=t(65),_=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"_1-安装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-安装"}},[e._v("#")]),e._v(" 1. 安装")]),e._v(" "),t("h3",{attrs:{id:"_1-1-构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-构建"}},[e._v("#")]),e._v(" 1.1 构建")]),e._v(" "),t("p",[t("code",[e._v("make build")]),e._v("：在 "),t("code",[e._v("./build")]),e._v(" 中构建 "),t("code",[e._v("chainbridge")]),e._v("。")]),e._v(" "),t("p",[t("strong",[e._v("or")])]),e._v(" "),t("p",[t("code",[e._v("make install")]),e._v("：使用"),t("code",[e._v("go install")]),e._v(" 将 "),t("code",[e._v("chainbridge")]),e._v("添加到您的GOBIN。")]),e._v(" "),t("h3",{attrs:{id:"_1-2-docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-docker"}},[e._v("#")]),e._v(" 1.2 Docker")]),e._v(" "),t("p",[e._v("可以在这里找到官方的 ChainBridge Docker 镜像。")]),e._v(" "),t("p",[e._v("要在本地构建 Docker 映像，请运行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker build -t chainsafe/chainbridge .\n")])])]),t("p",[e._v("启动链桥：")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("docker run -v")]),e._v(" 使用绝对路径而不是相对路径。")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("docker run -v $(pwd)/config.json:/config.json chainsafe/chainbridge\n")])])]),t("h2",{attrs:{id:"_2-配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置"}},[e._v("#")]),e._v(" 2. 配置")]),e._v(" "),t("blockquote",[t("p",[e._v("注意：TOML 配置已被弃用，取而代之的是 JSON")])]),e._v(" "),t("p",[e._v("链配置采用以下形式：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n     "name": "eth",                 // 名称\n     "type": "ethereum",            // 链类型（例如 "ethereum" 或 "substrate"）\n     "id": "0",                     // 链 ID\n     "endpoint": "ws://<host>:<port>", // 节点端点\n     "from": "0xff93...",   // 中继器的链上地址\n     "opts": {},            // 链特定的配置选项（见下文）\n}\n')])])]),t("p",[e._v("有关示例配置，请参阅 "),t("code",[e._v("config.json.example")]),e._v("。")]),e._v(" "),t("h3",{attrs:{id:"_2-1-ethereum-选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-ethereum-选项"}},[e._v("#")]),e._v(" 2.1 Ethereum 选项")]),e._v(" "),t("p",[e._v("以太坊链支持以下附加选项：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "bridge": "0x12345...", // 桥接合约地址（必填）\n    "erc20Handler": "0x1234...", // erc20 处理程序的地址（必填）\n    "erc721Handler": "0x1234...", // erc721 处理器地址（必填）\n    "genericHandler": "0x1234...", // 通用处理程序的地址（必填）\n    "maxGasPrice": "0x1234", // 交易的 Gas 价格（默认值：20000000000）\n    "minGasPrice": "0x1234", // 交易的最低 gas 价格（默认值：0）\n    "gasLimit": "0x1234", // 交易的 Gas 限制（默认值：6721975）\n    "gasMultiplier": "1.25", // 将 gas 价格乘以提供的值（默认值：1）\n    "http": "true", // 链式连接是ws还是http（默认：false）\n    "startBlock": "1234", // 开始处理事件的块（默认值：0）\n    "blockConfirmations": "10" // 在处理一个块之前要等待的块数\n    "useExtendedCall": "true" // 使用 ResourceID 扩展对基板的外部调用。用于向后兼容示例托盘。 *默认值：假*\n    "egsApiKey": "xxx..." // Eth Gas Station 的 API 密钥 (https://www.ethgasstation.info/)\n    "egsSpeed": "fast" // gas price 选择所需的速度，选项有："average"、"fast"、"fastest"\n}\n')])])]),t("h3",{attrs:{id:"_2-2-substrate-选项"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-substrate-选项"}},[e._v("#")]),e._v(" 2.2 Substrate 选项")]),e._v(" "),t("p",[e._v("Substrate 支持以下附加选项：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('{\n    "startBlock": "1234" // 开始处理事件的块（默认值：0）\n}\n')])])]),t("h3",{attrs:{id:"_2-3-块存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-块存储"}},[e._v("#")]),e._v(" 2.3 块存储")]),e._v(" "),t("p",[e._v("块存储用于记录中继器处理的最后一个块，因此它可以从中断的地方继续。")]),e._v(" "),t("p",[e._v("如果提供了 "),t("code",[e._v("startBlock")]),e._v(" 选项，则在启动时使用 "),t("code",[e._v("startBlock")]),e._v(" 和块存储中的最新块中的较大者。")]),e._v(" "),t("p",[e._v("要禁用从块存储加载，请指定 "),t("code",[e._v("--fresh")]),e._v(" 标志。 可以使用 "),t("code",[e._v("--blockstore <path>")]),e._v(" 提供块存储的自定义路径。 对于开发，"),t("code",[e._v("--latest")]),e._v(" 标志可用于从当前块开始并覆盖任何其他配置。")]),e._v(" "),t("h3",{attrs:{id:"_2-4-keystore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-keystore"}},[e._v("#")]),e._v(" 2.4 Keystore")]),e._v(" "),t("p",[e._v("ChainBridge 需要密钥来签署和提交交易，并识别链上的每个桥接节点。")]),e._v(" "),t("p",[e._v("要使用安全密钥，请参阅"),t("code",[e._v("chainbridge accounts --help")]),e._v("。 密钥库密码可以通过 "),t("code",[e._v("KEYSTORE_PASSWORD")]),e._v(" 环境变量提供。")]),e._v(" "),t("p",[e._v("要导入外部以太坊密钥，例如使用 geth 生成的密钥，请使用“chainbridge accounts import --ethereum /path/to/key”。")]),e._v(" "),t("p",[e._v("要将私钥作为密钥库导入，请使用“chainbridge account import --privateKey key”。")]),e._v(" "),t("p",[e._v("出于测试目的，chainbridge 提供了 5 个测试密钥。 可以与 "),t("code",[e._v("--testkey <name>")]),e._v(" 一起使用，其中 "),t("code",[e._v("name")]),e._v(" 是 "),t("code",[e._v("Alice")]),e._v("、"),t("code",[e._v("Bob")]),e._v("、"),t("code",[e._v("Charlie")]),e._v("、"),t("code",[e._v("Dave")]),e._v(" 或 "),t("code",[e._v("Eve")]),e._v(" 之一。")]),e._v(" "),t("h2",{attrs:{id:"_3-链的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-链的实现"}},[e._v("#")]),e._v(" 3. 链的实现")]),e._v(" "),t("ul",[t("li",[e._v("Ethereum (Solidity):")])]),e._v(" "),t("p",[e._v("链桥所需的 Solidity 合约。 包括部署和交互 CLI。合约的绑定存在于"),t("code",[e._v("bindings/")]),e._v("中。 要更新绑定修改"),t("code",[e._v("scripts/setup-contracts.sh")]),e._v("，然后运行"),t("code",[e._v("make clean && make setup-contracts")])]),e._v(" "),t("h2",{attrs:{id:"_4-文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-文档"}},[e._v("#")]),e._v(" 4. 文档")]),e._v(" "),t("p",[e._v("MKdocs 将为位于 "),t("code",[e._v("Chainbridge/docs/")]),e._v(" 中的 Chainsafe 降价文件生成静态 HTML 文件")]),e._v(" "),t("p",[t("code",[e._v("make install-mkdocs")]),e._v(": 拉取 docker 镜像 MkDocs")]),e._v(" "),t("p",[t("code",[e._v("make mkdocs")]),e._v(": 运行 MkDoc 的 docker 镜像，在 "),t("code",[e._v("localhost:8000")]),e._v(" 上构建和托管 html 文件.")]),e._v(" "),t("h2",{attrs:{id:"_5-测试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-测试"}},[e._v("#")]),e._v(" 5. 测试")]),e._v(" "),t("p",[e._v("单元测试需要一个运行在“localhost:8545”上的以太坊节点和一个运行在“localhost:9944”上的底层节点。 E2E 测试需要在 "),t("code",[e._v("localhost:8546")]),e._v(" 上增加一个以太坊节点。")]),e._v(" "),t("p",[e._v("提供了一个 docker-compose 文件来在隔离环境中运行两个 Geth 节点和一个 chainbridge-substrate-chain 节点：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ docker-compose -f ./docker-compose-e2e.yml up\n")])])]),t("p",[e._v("所有 Go 测试都可以运行：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ make test\n")])])]),t("p",[e._v("可以运行专门针对以太坊、底层和 E2E 的 Go 测试")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("$ make test-eth\n$ make test-sub\n$ make test-e2e\n")])])])])}),[],!1,null,null,null);a.default=_.exports}}]);